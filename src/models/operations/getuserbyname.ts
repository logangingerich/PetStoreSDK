/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as b64$ from "../../lib/base64.js";
import * as z from "zod";

export type GetUserByNameRequest = {
    /**
     * The name that needs to be fetched. Use user1 for testing.
     */
    username: string;
};

export type GetUserByNameResponse =
    | Uint8Array
    | string
    | ReadableStream<Uint8Array>
    | Blob
    | ArrayBuffer
    | Buffer;

/** @internal */
export const GetUserByNameRequest$inboundSchema: z.ZodType<
    GetUserByNameRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    username: z.string(),
});

/** @internal */
export type GetUserByNameRequest$Outbound = {
    username: string;
};

/** @internal */
export const GetUserByNameRequest$outboundSchema: z.ZodType<
    GetUserByNameRequest$Outbound,
    z.ZodTypeDef,
    GetUserByNameRequest
> = z.object({
    username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserByNameRequest$ {
    /** @deprecated use `GetUserByNameRequest$inboundSchema` instead. */
    export const inboundSchema = GetUserByNameRequest$inboundSchema;
    /** @deprecated use `GetUserByNameRequest$outboundSchema` instead. */
    export const outboundSchema = GetUserByNameRequest$outboundSchema;
    /** @deprecated use `GetUserByNameRequest$Outbound` instead. */
    export type Outbound = GetUserByNameRequest$Outbound;
}

/** @internal */
export const GetUserByNameResponse$inboundSchema: z.ZodType<
    GetUserByNameResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    b64$.zodInbound,
    z.union([
        z.instanceof(ReadableStream<Uint8Array>),
        z.instanceof(Blob),
        z.instanceof(ArrayBuffer),
        z.instanceof(Buffer),
    ]),
]);

/** @internal */
export type GetUserByNameResponse$Outbound =
    | Uint8Array
    | ReadableStream<Uint8Array>
    | Blob
    | ArrayBuffer
    | Buffer;

/** @internal */
export const GetUserByNameResponse$outboundSchema: z.ZodType<
    GetUserByNameResponse$Outbound,
    z.ZodTypeDef,
    GetUserByNameResponse
> = z.union([
    b64$.zodOutbound,
    z.union([
        z.instanceof(ReadableStream<Uint8Array>),
        z.instanceof(Blob),
        z.instanceof(ArrayBuffer),
        z.instanceof(Buffer),
    ]),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserByNameResponse$ {
    /** @deprecated use `GetUserByNameResponse$inboundSchema` instead. */
    export const inboundSchema = GetUserByNameResponse$inboundSchema;
    /** @deprecated use `GetUserByNameResponse$outboundSchema` instead. */
    export const outboundSchema = GetUserByNameResponse$outboundSchema;
    /** @deprecated use `GetUserByNameResponse$Outbound` instead. */
    export type Outbound = GetUserByNameResponse$Outbound;
}
